(trigger
    (key [[cmd]\]))

(name [instantiate entity])

(only-in source.vhdl)

(input selection word)

(output snippet)

(save nothing)

(script [#!/usr/bin/perl
# use: ./transform.pl in_file > out_file
# use warnings;
# use strict;

use File::Find ;

our $keyword = <> ;
$keyword = lc($keyword) ;

# Check to see if the keyword is set
if( $keyword eq "" ) {
    print "\${0: keyword not set\}" ;
    exit ;
}

my $dir = $ENV{'TM_PROJECT_DIRECTORY'} ;

# Check to see if the directory is set
if( $dir eq "" ) {
    print $keyword . "\$\{0: project directory not set\}" ;
    exit ;
}

# Find the entity
finddepth( { wanted => \&wanted, follow => 1 }, $dir ) ;

# Didn't find anything
print $keyword . "\$\{0: entity not found\}" ;

sub wanted {
    if (opendir(DIR, $File::Find::fullname)) {
        return ;
    }
    else {
        my @parts = split(/\./) ;
        $ext = lc(@parts[$#parts]) ;
        if( $ext eq "vhd" or $ext eq "vhdl" ) {
            $_ = parsefile($File::Find::fullname, $keyword) ;
            if( $_ =~ m/.*$keyword.*/ ) {
                print $_ ;
                exit ;
            }
        }
    }
}

sub parsefile {
    open(FILE, shift) or return ;
    my @in = <FILE>;
    my $in = join "", @in;
    my $key = shift ;
    # split the file apart
    $in =~ m{(.*)\s+(^\s*entity.*)(?=^\s*end entity)[^;]*;\s*(.*)}ms;
    # my $before = $1;
    my $entity = $2;
    # my $after = $3;

    return findentity($entity, $key) ;
}

# Format an entity
sub findentity {
    my $in = shift ;
    my $key = shift ;
    my $max_w = 0;
    my $i = 4 ;
    my $found = 0 ;
    # discard the "end entity" line
    $in =~ s{^end\s*entity\s*\w+\s*;$}{}m;
    my @in = split /\n/, $in;
    foreach (@in) {
	   # change the "entity X is" definition line to "U_X : X"
    	   $_ =~ s{^\s*entity\s+([^ ]+)\s+is\s*$}{U_$1\$\{1:_0\} : entity \$\{2:work\}\.$1\(\$\{3:arch\}\)};

        # flag if we have found an entity with the keyword
        if ( lc($1) =~ /\b($key)\b/ and $found == 0 ) {
            $found = 1 ;
        }

        # re-set comments interspersed formatted properly
        $_ =~ s{\s*\-\-}{    \-\-} ;

        # change comments at the end of lines to nothing
        $_ =~ s{;\s*\-\-.*$}{} ;

        # remove any attributes
        $_ =~ s{^\s*attribute.*$}{} ;

	   # change "X : integer :=" or "X : in std_logic;" line to "X =>"
    	   $_ =~ s{^\s+(\w+)\s*\:\s*[^;]+;?\s*$}{    $1\t=> \$\{$i+1:$1\},};
	   # determine the largest length of the generic/signal for fill
    	   if (length $1 > $max_w) {
	       $max_w = length $1;
    	   }
	   # change "X (" to "X map ("
    	   $_ =~ s{^\s+(\))?(\s*;\s*)?(\w+)\s*\(}{$1  $3 map \(};
        if( $found == 0 ) {
            return ;
        }
    }

    # Reformat generic/signal lines to be filled properly
    my $fmt    = '    %-' . $max_w . "s\t=>\t\$\{%d:%s\},";
    foreach (@in) {
	if (m{=\> }) {
	    $_ =~ s{^\s+(\w+)\s*=\>}{};
	    $_ = sprintf $fmt, $1, $i, $1 ;
        $i = $i + 1 ;
	}
    }
    $in = join("\n", @in) . "\n";
    # remove ending commas
    $in =~ s{,\s*\)}{\n  \)}g ;
    # nestle parenthesis where possible
    $in =~ s{^\s+\)\s*;\s*port\s*([^ ]+)\s*\(\s*$}{  ) port $1 (}ms;

    return $in;
}
])