(detector
    (extension vhd)
    (extension vhdl)
    (extension vho))

(folding
    (start [(?x)
		# From the start of the line make sure we are not going into a comment ...
		^(
			([^-]-?(?!-))*?
				(
				# Check for "keyword ... is"
				 (\b(?i:architecture|case|entity|function|package|procedure)\b(.+?)(?i:\bis)\b)

				# Check for if statements
				|(\b(?i:if)\b(.+?)(?i:generate|then)\b)

				# Check for and while statements
				|(\b(?i:for|while)(.+?)(?i:loop|generate)\b)

				# Check for keywords that do not require an is after it
				|(\b(?i:component|process|record)\b[^;]*?$)

				# From the beginning of the line, check for instantiation maps
				|(^\s*\b(?i:port|generic)\b(?i:\s+map\b)?\s*\()
			)
		)
	])
    (stop [(?x)
		# From the start of the line ...
		^(
			(
				(
					# Make sure we are not going into a comment ...
					([^-]-?(?!-))*?
						(
							# The word end to the end of the line
			 				(?i:\bend\b).*$\n?
						)
					)
				)

				# ... a close paren followed by an optional semicolon as the only thing on the line
			    |(\s*?\)\s*?;?\s*?$\n?
			)
		)
	]))

(shell-variables
    (TM_COMMENT_START [-- ]))

(comment.line [-- ])

(indentation.decrease [^\s*(elsif|else|end)\b])

(indentation.increase [\b(begin|is|port|elsif|else|loop|generate|then)$])

(pair "
    "
    (smart-typing)
    (highlight))

(pair `[`
    `]`
    (smart-typing)
    (highlight))

(pair [(]
    [)]
    (smart-typing)
    (highlight))

(pair [{]
    [}]
    (smart-typing)
    (highlight))

(in entity.name.type.architecture.begin.vhdl
    (symbol-list
        (transformation [s/(.*)/architecture $1/])))

(in entity.name.section.component_instantiation.vhdl
    (symbol-list
        (transformation [s/\s*:\s*/ of / ; s/(.*)/    instantiation $1/])))

(in entity.name.type.component.begin.vhdl
    (symbol-list
        (transformation [s/(.*)/    component $1/])))

(in entity.name.section.entity_instantiation.vhdl
    (symbol-list
        (transformation [s/\s*:\s*/ of / ; s/\b(?i:use\s+)\b// ; s/(.*)/    instantiation $1/])))

(in entity.name.type.entity.begin.vhdl
    (symbol-list
        (transformation [s/(.*)/entity $1/])))

(in [meta.block.function_prototype.vhdl, meta.block.function_definition.vhdl]
    (symbol-list
        (transformation [s/\b(?i:is)\b.*/;/g ; s/(?i:\bfunction\b)/function/g ; s/;$// ; s/\s+/ /g ; s/\s*/    /])))

(in [entity.name.tag.if.generate.begin.vhdl, entity.name.tag.for.generate.begin.vhdl]
    (symbol-list
        (transformation [s/(.*)/    generate $1/])))

(in [entity.name.type.architecture.end.vhdl, entity.name.type.entity.reference.vhdl, entity.name.type.component.end.vhdl, entity.name.section.package.end.vhdl, entity.name.type.entity.end.vhdl, entity.name.tag.if.generate.end.vhdl, entity.name.tag.for.generate.end.vhdl, entity.name.section.process.end.vhdl]
    (symbol-list))

(in entity.name.section.package_body.begin.vhdl
    (symbol-list
        (transformation [s/(.*)/package body $1/])))

(in entity.name.section.package.begin.vhdl
    (symbol-list
        (transformation [s/(.*)/package $1/])))

(in [meta.block.procedure_prototype.vhdl, meta.block.procedure_definition.vhdl]
    (symbol-list
        (transformation [s/\b(?i:is)\b.*/;/g ; s/(?i:\bprocedure\b)/procedure/g ; s/;$// ; s/\s+/ /g ; s/\s*/    /])))

(in meta.block.process.vhdl
    (symbol-list
        (transformation [
		s/\s*(.*?)(?i:\bprocess\b)\s*(\(.*?\))?.*/$1 $2/ ;
		s/(:)/ / ; 
		s/(.*)/process $1/ ; 
		s/\s+/ /g ; 
		s/(.*)/    $1/])))

(in entity.name.type.record.vhdl
    (symbol-list
        (transformation [s/^(.*)$/    record $1/])))

(in entity.name.type.subtype.vhdl
    (symbol-list
        (transformation [s/^(.*)$/    subtype $1/])))

(in entity.name.type.type.vhdl
    (symbol-list
        (transformation [s/^(.*)$/    type $1/])))